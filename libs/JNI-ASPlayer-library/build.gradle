plugins {
    id 'com.android.library'
}

ext {
    // sdk output path
    releaseSdkDir = "build/sdk"
    releaseIncludeDir = "build/sdk/include"
    releaseSoDir = "build/sdk/libs"
    releaseJarDir = "build/sdk"
    soSymbolsOutputDir = "build/symbols"
}

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    ndkVersion rootProject.ext.android.ndkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.build.versionCode
        versionName rootProject.ext.build.versionName

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11"
            }
        }

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    compileOnly files('sdk/tuner_framework.jar')

    api project(":ASPlayer-library")

    testImplementation rootProject.ext.testDep.junit
    androidTestImplementation rootProject.ext.testDep.androidJunit
    androidTestImplementation rootProject.ext.testDep.espresso
}

task clearSo(type: Delete) {
    delete releaseSoDir
}

// release Jni_ASPlayer so
task releaseSo(type: Copy) {
    from "build/intermediates/cmake/release/obj/"
    into releaseSoDir

    include '**/*.so'
}

releaseSo.dependsOn(clearSo, build)

task releaseInclude(type: Copy) {
    from "src/main/jni/include/"
    into releaseIncludeDir

    include "JNIASPlayer.h"
}

task releaseJniASPlayer(type: Jar) {
    // merge ASPlayer.jar and JniASPlayer.jar
    archivesBaseName = JniASPlayerJarName
    from(project.zipTree('build/intermediates/aar_main_jar/release/classes.jar'))
    from(project.zipTree("${gradle.ext.ASPlayerLibraryDir}/build/sdk/${ASPlayerJarName}.jar"))
    getDestinationDirectory().set(getProject().file(releaseJarDir))
}

// release Jni_ASPlayer (so / include / jar)
releaseJniASPlayer.dependsOn(build, releaseSo, releaseInclude)

void copyJniAsPlayerHeaderToSdkDir() {
    // copy jni_asplayer include to output sdk dir

    String destIncludeDir = releaseIncludeDir
    String srcIncludeDir = project.projectDir.getAbsolutePath() + "/src/main/jni/include/"
    copy {
        from srcIncludeDir
        into destIncludeDir
        include "JNIASPlayer.h"
    }
    println(String.format("copy JNIASPlayer.h from: %s => %s", srcIncludeDir, destIncludeDir))
}

void copySo(srcDir, destDir) {
    println(String.format("copy from: %s => %s", srcDir, destDir))

    copy {
        from srcDir
        into destDir
        include('**/*.so')
    }
}

void copyJniAsPlayerSoToDir(soType, destDir) {
    // copy so to symbols dir
    String srcDir = project.projectDir.getAbsolutePath() + "/build/intermediates/cmake/" + soType + "/obj/"
    println(String.format("copy so from: %s => %s", srcDir, destDir))

    copy {
        from srcDir
        into destDir
        include('**/*.so')
    }
}

void copyTaskOutputSoToDir(task, destPath) {
    try {
        Set<File> files = task.soFolder.getAsFileTree().getFiles()
        for (File file : files) {
            File abiFile = file.getParentFile()
            String parentDir = abiFile.getParentFile().getAbsolutePath()
            copySo(parentDir, destPath)
        }
    } catch (e) {
        e.printStackTrace()
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.equalsIgnoreCase("externalNativeBuildRelease")) {
        task.doLast {
            copyJniAsPlayerHeaderToSdkDir()
            println("task: " + task.name + ", need copy JNI-ASPlayer release so to sdk output dir")
            copyJniAsPlayerSoToDir("release", "${soSymbolsOutputDir}/release/")
            copyJniAsPlayerSoToDir("release", "${releaseSoDir}/")
        }
    } else if (task.name.equalsIgnoreCase("externalNativeBuildDebug")) {
        task.doLast {
            copyJniAsPlayerHeaderToSdkDir()
            println("task: " + task.name + ", need copy JNI-ASPlayer debug so to sdk output dir")
            copyJniAsPlayerSoToDir("debug", "${soSymbolsOutputDir}/debug/")
        }
    } else if (task.name.startsWith("buildCMakeRelWithDebInfo[")) {
        task.doLast {
            copyJniAsPlayerHeaderToSdkDir()
            println("task: " + task.name + ", need copy JNI-ASPlayer RelWithDebInfo so to sdk output dir")
            copyTaskOutputSoToDir(task, "${soSymbolsOutputDir}/relwithdebinfo/")
        }
    }
}
